// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelemetryFlow.Data;

#nullable disable

namespace TelemetryFlow.Data.Migrations
{
    [DbContext(typeof(TelemetryFlowDbContext))]
    partial class TelemetryFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("opc")
                .HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpcNodeOpcNodeGroup", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsId", "NodesId");

                    b.HasIndex("NodesId");

                    b.ToTable("OpcNodeOpcNodeGroup", "opc");
                });

            modelBuilder.Entity("OpcNodeOpcNodeProperty", b =>
                {
                    b.Property<Guid>("NodesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NodesId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("OpcNodeOpcNodeProperty", "opc");
                });

            modelBuilder.Entity("OpcNodeOpcNodeTag", b =>
                {
                    b.Property<Guid>("NodesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NodesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("OpcNodeOpcNodeTag", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpandedNodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("OpcNode", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcNodeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpcNodeGroup", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcNodeProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpcNodeProperty", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcNodeTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpcNodeTag", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MethodTopics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("OpcPublisher", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcServer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpcServer", "opc");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcServerEndpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityPolicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("OpcServerEndpoint", "opc");
                });

            modelBuilder.Entity("OpcNodeOpcNodeGroup", b =>
                {
                    b.HasOne("TelemetryFlow.Model.OpcNodeGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelemetryFlow.Model.OpcNode", null)
                        .WithMany()
                        .HasForeignKey("NodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpcNodeOpcNodeProperty", b =>
                {
                    b.HasOne("TelemetryFlow.Model.OpcNode", null)
                        .WithMany()
                        .HasForeignKey("NodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelemetryFlow.Model.OpcNodeProperty", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpcNodeOpcNodeTag", b =>
                {
                    b.HasOne("TelemetryFlow.Model.OpcNode", null)
                        .WithMany()
                        .HasForeignKey("NodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelemetryFlow.Model.OpcNodeTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcNode", b =>
                {
                    b.HasOne("TelemetryFlow.Model.OpcServer", "Server")
                        .WithMany("Nodes")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcPublisher", b =>
                {
                    b.HasOne("TelemetryFlow.Model.OpcServer", "Server")
                        .WithOne("Publisher")
                        .HasForeignKey("TelemetryFlow.Model.OpcPublisher", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcServerEndpoint", b =>
                {
                    b.HasOne("TelemetryFlow.Model.OpcServer", "Server")
                        .WithMany("Endpoints")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("TelemetryFlow.Model.OpcServer", b =>
                {
                    b.Navigation("Endpoints");

                    b.Navigation("Nodes");

                    b.Navigation("Publisher");
                });
#pragma warning restore 612, 618
        }
    }
}
